package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"

	"github.com/disintegration/imaging"
)

type AutoGenerated struct {
	Dataset []struct {
		Img  string `json:"img"`
		Dets []struct {
			Class string `json:"class"`
			Top   int    `json:"top"`
			Bot   int    `json:"bot"`
			Lft   int    `json:"lft"`
			Rgh   int    `json:"rgh"`
		} `json:"dets"`
	} `json:"data"`
}

var (
	imgdir, _ = filepath.Abs("./resdir/")
	outdir    = "./outdir"
	names     = []string{"license_car", "license_taxi"}
)

func getClassNum(class string) int {
	for i := range names {
		if names[i] == class {
			return i
		}
	}
	panic("No such class in names")
}

func main() {
	dataFile, err := os.Open("plates_dataset.json")
	if err != nil {
		panic(err)
	}
	defer dataFile.Close()
	byteValue, err := ioutil.ReadAll(dataFile)
	if err != nil {
		panic(err)
	}
	var data AutoGenerated
	err = json.Unmarshal(byteValue, &data)
	if err != nil {
		panic(err)
	}
	// maximize CPU usage for maximum performance
	for _, dat := range data.Dataset {
		if len(dat.Dets) == 0 {
			continue
		}
		fmt.Printf("%v%v\n", imgdir, dat.Img)
		img, err := imaging.Open(imgdir + "/" + dat.Img)
		if err != nil {
			panic(err)
		}
		err = imaging.Save(img, outdir+"/"+dat.Img)
		if err != nil {
			panic(err)
		}
		imgWidth := img.Bounds().Dx()
		imgHight := img.Bounds().Dy()
		ext := path.Ext(dat.Img)
		filename := dat.Img[:len(dat.Img)-len(ext)]
		file, err := os.Create(outdir + "/" + filename + ".txt")
		if err != nil {
			panic(err)
		}
		for _, det := range dat.Dets {
			top := float32(det.Top)
			bot := float32(det.Bot)
			lft := float32(det.Lft)
			rgh := float32(det.Rgh)
			hight := bot - top
			width := rgh - lft
			y := (top + hight/2.0) / float32(imgHight)
			x := (lft + width/2.0) / float32(imgWidth)
			hight = hight / float32(imgHight)
			width = width / float32(imgWidth)
			file.WriteString(fmt.Sprintf("%v %v %v %v %v\n", getClassNum(det.Class), x, y, width, hight))
			if err != nil {
				fmt.Println(err)
				os.Exit(1)
			}
		}
	}
	fmt.Println("Done")
}
