package main

import (
	"encoding/json"
	"fmt"
	"image"
	"io/ioutil"
	"os"
	"runtime"

	"github.com/disintegration/imaging"
)

type AutoGenerated struct {
	Dataset []struct {
		Img  string `json:"img"`
		Dets []struct {
			Class string `json:"class"`
			Top   int    `json:"top"`
			Bot   int    `json:"bot"`
			Lft   int    `json:"lft"`
			Rgh   int    `json:"rgh"`
		} `json:"dets"`
	} `json:"data"`
}

func main() {
	dataFile, err := os.Open("dataset.json")
	if err != nil {
		panic(err)
	}
	defer dataFile.Close()
	byteValue, err := ioutil.ReadAll(dataFile)
	if err != nil {
		panic(err)
	}
	var data AutoGenerated
	err = json.Unmarshal(byteValue, &data)
	if err != nil {
		panic(err)
	}
	// maximize CPU usage for maximum performance
	runtime.GOMAXPROCS(runtime.NumCPU())
	for i := 0; i < len(data.Dataset); i++ {
		for j := 0; j < len(data.Dataset[i].Dets); j++ {
			if data.Dataset[i].Dets[j].Class == "car" {
				if data.Dataset[i].Dets[j].Bot < 731 || data.Dataset[i].Dets[j].Top > 1000 {
					continue
				}
				img, err := imaging.Open(data.Dataset[i].Img)

				if err != nil {
					fmt.Println(err)
					os.Exit(1)
				}
				top := data.Dataset[i].Dets[j].Top
				bot := data.Dataset[i].Dets[j].Bot
				lft := data.Dataset[i].Dets[j].Lft
				rgh := data.Dataset[i].Dets[j].Rgh
				// crop out a rectangular region
				rectcropimg := imaging.Crop(img, image.Rect(lft, bot, rgh, top))

				// save cropped image
				err = imaging.Save(rectcropimg, "./resdir/"+fmt.Sprint(i)+fmt.Sprint(j)+".jpg")

				if err != nil {
					fmt.Println(err)
					os.Exit(1)
				}
			}
		}
	}
	// load original image

	// everything ok
	fmt.Println("Done")

}
func cropDetection(image []byte, ih, iw, xl, yt, dh, dw int32) []float32 {
	ans := make(float32, 0, ih*iw)
	counter := 0
	if yt < 0 {
		yt = 0
	}
	if xl < 0 {
		xl = 0
	}
	bot := yt + dh - 1
	if bot > ih-1 {
		bot = ih - 1
	}
	right := x + dw - 1
	if right > iw-1 {
		right = iw - 1
	}
	for layer := 0; layer < 3; i++ {
		for y := yt; y < bot; y++ {
			for x := xt; x < right; x++ {
				ans[counter] = float32(image[layer*ih*iw+iw*y+x]) / 257.0
				counter++
			}
		}
	}
	return ans
}
